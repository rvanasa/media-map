{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["filterThing","s","every","p","startsWith","parseFloat","console","log","articles","forEach","a","entities","filter","concepts","triples","v","b","score","as","sentiment","ts","triple_sentiment","very_positive","very_negative","negative","neutral","insult_rating","getScore","Boolean","window","location","hostname","match","ReactDOM","render","useState","selected","setSelected","unsorted","setUnsorted","sentimentNames","positive","round","n","digits","exp","Math","className","Card","Body","Row","Col","md","ListGroup","map","i","role","tools","Item","key","join","note","onClick","sort","article","open","url","source","title","Object","entries","k","style","opacity","c","includes","Button","variant","height","graph","nodes","Set","flatMap","id","label","edges","sub","verb","from","to","options","layout","improvedLayout","color","interaction","hoverEdges","physics","repulsion","nodeDistance","maxVelocity","graphComponent","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a93b350b.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nimport './App.scss';\n\nimport Graph from 'vis-react';\nimport {Button, Card, Col, ListGroup, Row} from 'react-bootstrap';\nimport articles from '../data/data';\n\nconsole.log(articles);\n\nfunction filterThing(s) {\n    return ['//', '#', '$', '@'].every(p => !s.startsWith(p)) && !parseFloat(s);\n}\n\nfunction getScore(a) {\n    let as = a.sentiment;\n    let ts = a.triple_sentiment;\n\n    return as.very_positive ** 3 + ts.very_positive ** 2 - as.very_negative ** 2 - ts.very_negative ** 2 - as.negative ** 2 - ts.negative ** 2 + as.neutral + ts.neutral - a.insult_rating ** 2 * 100;\n}\n\narticles.forEach(a => {\n    a.entities = a.entities.filter(filterThing);\n    a.concepts = a.concepts.filter(filterThing);\n    a.triples = a.triples.filter(([a, v, b]) => filterThing(a) && filterThing(v) && filterThing(b));\n\n    a.score = getScore(a);\n});\n\nexport default function App() {\n    let [selected, setSelected] = useState(null);\n    let [unsorted, setUnsorted] = useState(false);\n\n    let sentimentNames = {\n        very_positive: 'Very Positive',\n        very_negative: 'Very Negative',\n        positive: 'Positive',\n        negative: 'Negative',\n        neutral: 'Neutral',\n    };\n\n    let technologies = [\n        ['News scraping', ['NewsAPI', '(news-please)']],\n        ['Sentence tokenization', ['NLTK']],\n        ['Coreference resolution', ['SpaCy', 'NeuralCoref']],\n        ['Contraction resolution', ['(contractions)']],\n        ['Insult detection', ['BERT', 'Kaggle']],\n        ['Named entity recognition', ['OntoNotes']],\n        ['Morphological tagging', ['UD2.0']],\n        ['Sentiment classification', ['BERT', 'Stanford Sentiment Treebank']],\n        ['Ontology learning', ['NLTK']],\n        ['Treebank parsing', ['DeepPavlov']],\n    ];\n    let notes = [\n        'This algorithm works by reading emotional sentiment and checking how much the average sentence of an article resembles an insult.',\n        'It appears that this is working with the current bombardment of COVID-19 news, filtering out many of the articles clearly designed to induce fear or anger.',\n        'Since this was created fairly quickly for the ATLS 2000 midterm, I am using low-resolution models for experimentation. As a result, the sentiment ratings are nowhere near as accurate as their full potential.',\n        'Scores do not yet account for the reputation of the news outlet.',\n        'The named entity and association lists occasionally have some very weird data, but this is fine because it still gives a useful hint about the article\\'s contents.',\n        'I used this project as an opportunity to learn more about deep learning and natural language processing. I had no idea whether this would work, so it\\'s satisfying to see this actually filter out many of the highly sensational articles.',\n    ];\n\n    function round(n, digits = 3) {\n        let exp = 10 ** digits;\n        return Math.round(n * exp) / exp;\n    }\n\n    function graphComponent(article) {\n\n        let graph = {\n            // nodes: article.concepts.map(s => ({id: s})),\n            nodes: [...new Set(article.triples.flatMap(([a, _, b]) => [a, b]))].map(s => ({id: s, label: s})),\n            edges: article.triples.map(([sub, verb, obj]) => ({from: sub, to: obj, label: verb})),\n        };\n\n        console.log(graph);\n\n        let options = {\n            layout: {\n                improvedLayout: false,\n                // hierarchical: {\n                //     direction: 'LR',\n                //     nodeSpacing: 80,\n                //     levelSeparation: 100,\n                // },\n            },\n            nodes: {\n                color: '#2222',\n                // scaling:'square'\n            },\n            edges: {\n                color: '#2222',\n            },\n            interaction: {\n                hoverEdges: true,\n            },\n            physics: {\n                // enabled: false,\n                repulsion: {\n                    nodeDistance: 5,\n                },\n                maxVelocity: 5,\n            },\n        };\n\n        return (\n            <Graph graph={graph} options={options}/>\n        );\n    }\n\n    return (\n        <div className=\"py-4\">\n            <div className=\"px-4\">\n                <Card>\n                    <Card.Body>\n                        <Row>\n                            <Col md={6}>\n                                <h2>What is this?</h2>\n                                <hr/>\n                                <h5 className=\"my-4\">\n                                    <span className=\"text-success\">Media Map</span> is my idea for a deep learning\n                                    pipeline to combat media sensationalism. By assigning a score to each news article\n                                    using topics, associations, and sentiment, it is possible to filter out articles\n                                    with particularly loaded or inflammatory language.\n                                </h5>\n                                <h5 className=\"my-4\">The following technologies are used in this algorithm:</h5>\n                                <ListGroup className=\"mb-5\">\n                                    {technologies.map(([role, tools], i) => (\n                                        <ListGroup.Item key={i}>\n                                            <h6 className=\"mb-0\">{role} <small\n                                                className=\"text-muted font-weight-light\">| {tools.join(' / ')}</small>\n                                            </h6>\n                                        </ListGroup.Item>\n                                    ))}\n                                </ListGroup>\n                            </Col>\n                            <Col md={6}>\n                                <h2>A few things to note:</h2>\n                                <hr/>\n                                <ListGroup className=\"my-4\">\n                                    {notes.map((note, i) => (\n                                        <ListGroup.Item key={i}>\n                                            <h5 className=\"my-2\">{note}</h5>\n                                        </ListGroup.Item>\n                                    ))}\n                                </ListGroup>\n                            </Col>\n                        </Row>\n                        <h3 className=\"text-center text-muted\">\n                            Goal: reduce the prominence of fear-inducing articles in the top headlines for March 21st.\n                        </h3>\n                    </Card.Body>\n                </Card>\n            </div>\n            <hr/>\n            <div className=\"btn btn-lg btn-outline-success d-block py-3 m-4\" onClick={() => setUnsorted(!unsorted)}>\n                Sorting by {unsorted ? 'Most Recent' : 'Algorithm Score'}\n            </div>\n            {[...articles].sort((a, b) => unsorted ? 0 : b.score - a.score).map((article, i) => (\n                <div key={i} className=\"px-4\">\n                    <Card className=\"mb-4\">\n                        <Card.Body>\n                            <div className=\"px-4 clickable\" onClick={() => window.open(article.url)}>\n                                <h4 className=\"mb-0 text-success float-right\">\n                                    <span className=\"text-muted\">Score:</span> {round(article.score)}\n                                </h4>\n                                <h4 className=\"mb-1\">\n                                    <span>{article.source}</span> | <span\n                                    className=\"font-weight-bold\">{article.title}</span>\n                                </h4>\n                            </div>\n                            <Row className=\"w-100\">\n                                <Col md={6}>\n                                    <hr/>\n                                    {Object.entries(article.sentiment).map(([k, v]) => (\n                                        <h5 key={k}>{sentimentNames[k]}: {round(v)}</h5>\n                                    ))}\n                                    <h5>Direct: {round(article.insult_rating ** 2 * 100)}</h5>\n                                    <hr/>\n                                    <h6 style={{opacity: .9}}>\n                                        {article.entities.join(', ')}\n                                    </h6>\n                                    <div className=\"text-muted font-weight-lighter\">\n                                        {article.concepts.filter(c => !article.entities.includes(c)).join(' ~ ')}\n                                    </div>\n                                </Col>\n                                <Col md={6} className=\"h-100\">\n                                    <hr/>\n                                    <Button variant=\"outline-light\" className=\"w-100\"\n                                            onClick={() => setSelected(selected === article ? null : article)}>\n                                        {selected === article ? 'Hide' : 'Show'} Visualization\n                                    </Button>\n                                    <hr/>\n                                    {selected === article && (\n                                        <div className=\"bg-white w-100\" style={{height: '80vh'}}>\n                                            {graphComponent(article)}\n                                        </div>\n                                    )}\n                                    {selected !== article && article.triples.map(([a, v, b], i) => (\n                                        <div key={i}>\n                                            <span className=\"text-danger\">{a} </span>\n                                            <span className=\"text-muted\">{v} </span>\n                                            <span className=\"text-info\">{b}</span>\n                                        </div>\n                                    ))}\n                                </Col>\n                            </Row>\n                        </Card.Body>\n                    </Card>\n                    <hr/>\n                </div>\n            ))}\n        </div>\n    );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}